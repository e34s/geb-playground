import org.apache.tools.ant.taskdefs.condition.Os

ext {
    // The drivers we want to use
    drivers = ["chrome", "palotas"]

    ext {
        groovyVersion = '2.4.7'
        gebVersion = '1.0'
        seleniumVersion = '2.53.1'
        chromeDriverVersion = '2.25'
    }
}

apply plugin: "groovy"
apply from: "gradle/idea.gradle"
apply from: "gradle/osSpecificDownloads.gradle"

repositories {
    mavenCentral()
    jcenter()

}

dependencies {
    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    //testCompile "org.gebish:geb-junit4:$gebVersion"

    //adding testng
    testCompile 'org.testng:testng:6.9.12'
    testCompile 'org.gebish:geb-testng:1.0'



    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    //testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        println("IN DRIVERS.EACH: " + driver)

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

chromeTest {

    println("entering chromeTest")

    /*
    println(" +++++ ENTERING CHROMETEST +++++++")
    dependsOn unzipChromeDriver
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
*/
}

palotasTest {
    print("entering palotasTest")
}



test {
    println("entering test task")

    maxParallelForks = 2
    println("Parallel forks: " + maxParallelForks)



    dependsOn drivers.collect { tasks["${it}Test"] }

    System.setProperty("webdriver.chrome.driver", "/Users/gridfusion/Dowloads/chromedriver")
    System.setProperty("webdriver.gecko.driver", "/Users/gridfusion/Dowloads/geckodriver")
    println("SYSTEM PROPERTY: " + System.properties['webdriver.chrome.driver'])
    println("SYSTEM PROPERTY: " + System.properties['webdriver.gecko.driver'])


    useTestNG() {
        excludeGroups 'e2e'
    }

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    println("running test task")

}

task envSetup {

    System.setProperty("webdriver.chrome.driver", "/Users/gridfusion/Dowloads/chromedriver")
    System.setProperty("webdriver.gecko.driver", "/Users/gridfusion/Dowloads/geckodriver")
    println("SYSTEM PROPERTY: " + System.properties['webdriver.chrome.driver'])
    println("SYSTEM PROPERTY: " + System.properties['webdriver.gecko.driver'])

}

task e2eTest(type:Test, dependsOn: "envSetup") {
//    https://ferritedog.wordpress.com/2012/08/02/gradle-and-testng-grouping-the-test-runs/
    println("entering e2e test task")

    //dependsOn drivers.collect { tasks["${it}Test"] }

    useTestNG() {
        includeGroups 'e2e'
        options.parallel = 'methods' //modes: methods, tests, classes or instances.
        options.threadCount = 4
    }

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    println("running test task")

}

task junittests(type:Test, dependsOn: "envSetup") {
//    https://ferritedog.wordpress.com/2012/08/02/gradle-and-testng-grouping-the-test-runs/
    println("entering junit test task")
    maxParallelForks = Runtime.runtime.availableProcessors()


    //dependsOn drivers.collect { tasks["${it}Test"] }

    useJUnit() {
    }

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}


/*
test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}
*/


apply from: "gradle/ci.gradle"
